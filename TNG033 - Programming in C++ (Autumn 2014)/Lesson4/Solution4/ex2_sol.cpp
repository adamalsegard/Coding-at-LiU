/******************************
* TNG033: Lesson 4            *
* Exercise 2                  *
*******************************/

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

//NOTE: This exercise also shows that the compiler may point to an error in a certain line
//while the error may in fact originate somewhere else in the code
//Thus, a programmer must have a deep understanding of how the program works and
//what code the compiler injects automatically

/**************************
* Class Uncopyable        *
***************************/

class Uncopyable  //Exercise c
{

protected:
    Uncopyable() = default;

    ~Uncopyable() { };

 private:
    Uncopyable(const Uncopyable&);
    //No default constructor is generated by the compiler
    //if a copy constructor (or any other constructor) is declared in the class

    const Uncopyable& operator=(const Uncopyable&);

};


/*******************************
* Class Instrument             *
********************************/

class Instrument : public Uncopyable
{
public:

    //Constructor
    Instrument(string b);

    string get_identification() const;

    void set_brand(string bb)
    {
        brand = bb;    //Exercise a.iii
    }


protected:
    const int id;  //Exercise a.i
    //Exercise b: operator= is disallowed due to const data member id

    string brand;

    static int id_counter;  //Exercise a.i
};

int Instrument::id_counter = 0; //Exercise a.i


/**********************************
* Class Instrument                *
* Member functions implementation *
***********************************/


//Cosntructor
Instrument::Instrument(string b)
    : id(id_counter), brand(b) //Uncopyable::Uncopyable() is called automatically
{
    ++id_counter; //Exercise a.i
};

string Instrument::get_identification() const //Exercise a.ii
{
    ostringstream os;

    os << brand << "<" << id << ">";

    return os.str();
}


/*******************************
* Class Piano                  *
********************************/


class Piano : public Instrument
{
public:

    Piano(string b) : Instrument(b)
    { };

};


/*******************************
* Class Violin                 *
********************************/


class Violin : public Instrument
{
public:

    Violin(string b, bool wood = true)  //Exercise a.iv
        : Instrument(b), wood_violin(wood)
    { };

    bool is_wooden() const //Exercise a.v
    {
        return wood_violin;
    }

protected:
    bool wood_violin;

};


/*******************************
* Main                         *
********************************/


int main()
{
    Instrument I1("Bach");

    Piano P1("Yamaha");
    Piano P2("Yamaha");

    const Violin V1("Stradivarius");

    //Exercise a.ii
    cout << I1.get_identification() << endl;
    cout << P1.get_identification() << endl;
    cout << P2.get_identification() << endl;
    cout << V1.get_identification() << endl;

    //Uncopyable u; //does not compile cause default constructor of class Uncopyable is protected

    //Exercise b
//    Piano P3(P1); //compiles
//    P1 = P2;      //does not compile
    //operator= is disallowed due to const data member

//    Exercise d: no member functions of a derived class of Uncopyable can be called
//    through a pointer Uncopyable *ptr cause
//    1. there are no virtual functions in Uncopyable and,
//    therefore, dynamic binding cannot be used
//    2. and, there are no public member functions available for class Uncopyable, either

//    Uncopyable *ptr = new Violin("XXX");
//
//    delete ptr; //compilation error cause ~Uncopyable() is not public

    return 0;
}

